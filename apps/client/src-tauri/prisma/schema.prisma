// 这是Prisma的数据库模式文件 - 仅供参考
// 实际项目使用的是Diesel ORM，这个文件只是为了提供更直观的数据库结构视图
// 更多信息请参考: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // 注意：这个生成器配置仅供参考，实际项目中不会使用
}

datasource db {
  provider = "sqlite"
  // 这个路径仅供参考，实际数据库路径由应用程序代码决定
  url      = "file:./database.sqlite"
}

// 用户模型 - 简化版
model User {
  id           String       @id @default(uuid())
  name         String       // 用户名称
  avatar_url   String?      // 用户头像URL
  description  String?      // 用户描述
  is_ai        Boolean      @default(false) // 是否为AI用户
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  
  // 关系字段
  messages     Message[]    // 发送的消息
  chats        ChatParticipant[] // 参与的聊天
  
  // 联系人关系
  contacts     UserContact[] // 该用户的联系人
  
  // Agent关系
  agent        Agent?        // 用户关联的AI代理

  // 资源关系
  resources    Resource[]    // 用户拥有的资源

  @@map("users")
}

// 资源模型
model Resource {
  id           String       @id @default(uuid())
  name         String       // 资源名称
  type         String       // 资源类型: "text" 或 "image"
  url          String       // 资源URL
  file_name    String       // 文件名
  description  String?      // 资源描述
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  
  // 关系字段 - 资源所有者
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @map("user_id")

  @@map("resources")
}

// AI代理模型
model Agent {
  id                String       @id @default(uuid())
  provider          String       // 模型提供商
  model_name        String       // 模型名称
  system_prompt     String?      // 系统提示词，控制AI的行为和角色
  
  // 模型参数
  temperature       Float?       @default(0.7) // 控制输出随机性
  top_p             Float?       @default(0.9) // 影响token选择的多样性
  top_k             Int?         @default(40)  // 限制每步考虑的token数量
  repeat_penalty    Float?       @default(1.1) // 重复惩罚系数
  stop_sequences    String?      // 停止序列，以逗号分隔
  max_tokens        Int?         @default(2048) // 最大生成token数
  presence_penalty  Float?       @default(0.0) // 存在惩罚
  frequency_penalty Float?       @default(0.0) // 频率惩罚
  
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  
  // 关系字段
  user              User         @relation(fields: [userId], references: [id])
  userId            String       @unique @map("user_id") // 确保一对一关系
  
  @@map("agents")
}

// 用户联系人关系表
model UserContact {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  
  // 关系字段
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @map("user_id")
  
  contactId    String       @map("contact_id")
  
  @@unique([userId, contactId]) // 确保一个用户对某个联系人只有一个记录
  @@map("user_contacts")
}

// 聊天模型 - 简化版
model Chat {
  id                 String       @id @default(uuid())
  name               String       // 聊天名称
  avatar_urls        String       // 头像URL数组，以逗号分隔存储
  unread_count       Int          @default(0) // 未读消息数量
  last_message       String?      // 最后一条消息的内容
  last_message_time  DateTime?    // 最后一条消息的时间
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  
  // 关系字段
  participants ChatParticipant[] // 聊天参与者
  messages     Message[]    // 聊天中的消息
  
  @@map("chats")
}

// 聊天参与者模型 - 多对多关系表
model ChatParticipant {
  id           String       @id @default(uuid())
  nickname     String?      // 用户在该聊天中的昵称
  description  String?      // 用户在该聊天中的描述
  joinedAt     DateTime     @default(now()) @map("joined_at")
  
  // 关系字段
  chat         Chat         @relation(fields: [chatId], references: [id])
  chatId       String       @map("chat_id")
  
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @map("user_id")
  
  @@unique([chatId, userId]) // 确保一个用户在一个聊天中只有一个参与记录
  @@map("chat_participants")
}

// 消息模型 - 简化版
model Message {
  id           String       @id @default(uuid())
  content      String       // 消息内容
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  
  // 关系字段
  chat         Chat         @relation(fields: [chatId], references: [id])
  chatId       String       @map("chat_id")
  
  sender       User         @relation(fields: [senderId], references: [id])
  senderId     String       @map("sender_id")

  @@map("messages")
}
